[
  {
    "content": "Blogs How to promote the Quality Best Practices  ",
    "description": "",
    "tags": null,
    "title": "My Blogs",
    "uri": "/blogs/"
  },
  {
    "content": "My Engineering Notes and Blogs Welcome on my Engineering Notes and Blogs site!\nMy Blogs How to promote the Quality Best Practices My Notes Gradle Gradle for Java-Based applications and libraries Hugo Java Object-Oriented Programming Java Spring Boot 2 Quality Architect Role Role de l'Architecte Qualité  ",
    "description": "",
    "tags": null,
    "title": "Alain Bouchard's Engineering Notes and Blogs",
    "uri": "/"
  },
  {
    "content": "My Engineering Notes Gradle Gradle for Java-Based applications and libraries Hugo Java Object-Oriented Programming Java Spring Boot 2 Quality Architect Role Role de l'Architecte Qualité  ",
    "description": "",
    "tags": null,
    "title": "My Notes",
    "uri": "/notes/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "content": " Gradle (6.6.1) Terminology Actions Files structure for a “Multi-module build” Commands Example of Typed Task Plugins  \r Gradle (6.6.1)  requires JDK download from [https://gradle.org/releases/] can use either Groovy or Kotlin DSL (Domain-Specific Language)  Terminology  Project: models a software component Build script: contains automation instructions for a project Task: defines executable automation instructions  Ad hoc task: implements one-off, simplistic action code by defining doFirst or doLast, automatically extends DefaultTaslk without having to declare it Typed task: Explicitly declares type (for example, Copy); does not need to define actions as they are already provided by type   Wrapper:  set of files checked into SCM alongside source code standardizes compatible Gradle version for a project automatically downloads the Gradle distribution with defined version    Actions  doLast, doFirst, …  Files structure for a “Multi-module build”  root  + build.gradle  + moduleA/  | + build.gradle  | + src/  + moduleB/  + build.gradle  + src/ Commands   gradle \u003ctask name\u003e -\u003e run the task from the build.gradle\n  gradle wrapper -\u003e create the wrapper files\n  creates gradlew, gradlew.bat and the gradle directories…\n  gradle/wrapper/gradle-wrapper.properties\n  example:\n distributionBase=GRADLE_USER_HOME  distributionPath=wrapper/dists  distributionUrl=https\\://services.gradle.org/distributions/gradle-6.6.1-bin.zip  zipStoreBase=GRADLE_USER_HOME  zipStorePath=wrapper/dists   ./gradlew \u003ctask name\u003e -\u003e download the wrapper gradle version and execute the task with it\n    gradle projects -\u003e create settings for the project\n  Use settings.gradle do define information, example:\n rootProject.name = \"gradle-training\"     gradle \u003ctask name\u003e --dry-run -\u003e show the tasks from the build.gradle but does not execute\n  gradle tasks --all -\u003e show the full list of available tasks\n  Example of Typed Task   example:\n task copyFiles(type: Copy) {  from \"sourceFiles\"  into \"target\"  include \"**/*md\"  includeEmptyDirs = false  }   task createZip(type: Zip) {  from \"build/docs\"  archiveFileName = \"docs.zip\"  destinationDirectory = file(\"build/dist\")  dependsOn CopyFiles  }   Plugins  create a reusable or sharable \u003cplugin-name\u003e.gradle file with defined tasks apply the plugin to the local project build.gradle file, example:  plugin with tasks: myPlugin.gradle in build.gradle:     apply from: \"myPlugin.gradle\"   Notes:\n available plugins are Core Plugins (from Gradle) and Community Plugins (not from Gradle) to apply Core plugin Base (for example), in build.gradle:   apply plugin: 'base'   ",
    "description": "",
    "tags": null,
    "title": "Gradle",
    "uri": "/notes/gradle/"
  },
  {
    "content": " Project structure for gradle project in Java In build.gradle  JAVA plugin APPLICATION plugin   Commands Maven Dependencies Testing with Gradle  JUnit 5 dependencies    \r Project structure for gradle project in Java   single Java project with Gradle\n example:   root  + src  + main  + java  + resources   + test  + java  + resources  + build  + classes -\u003e compiled class files  + libs -\u003e generated JAR files   A multi-modules project file structure:\n example:   root/  + appA/  + build.gradle  + src/  + main/  + java/  + resources/  + test/  + java/  + resources/  + build/  + classes/ -\u003e compiled class files  + libs/ -\u003e generated JAR files  + appB/  + build.gradle  + src/  ... (same as above subproject)   In build.gradle JAVA plugin   add plugins:\n plugins {  id 'java'  }   set the Java compatibility:\n java {  sourceCompatibility = JavaVersion.VERSION_11  targetCompatibility = JavaVersion.VERSION_11  }   compiler arguments:\n compileJava {  // example: to terminate compilation if a warning occures)  options.compilerArgs \u003c\u003c '-Werror'  }   set JAR filename explicitly:\n version = '1.0.0'   jar {  archiveBaseName = '\u003cyour-project-name\u003e'  }   Set javadoc options:\njavadoc {  options.header = '\u003cyour java doc title here\u003e'  options.verbose() } APPLICATION plugin   in build.gradle file:\n plugins {  id 'application'  }   set base class to run for the application as needed by plugin:\n application {  mainClass = 'com.\u003corganization\u003e.\u003cproject\u003e.Main'  }   in settings.gradle file:\n rootProject.name = '\u003cproject_name\u003e'  include ':appA', ':appB'   Commands   gradle wrapper -\u003e Create Gradle Wrapper\n  gradle clean -\u003e Clean dist output?\n  with java plugin:\n ./gradlew compileJava --console=verbose ./gradlew processResources --console=verbose    or both above command agragated command:\n ./gradlew classes --console=verbose    see dependencies tree (and if it can be found)\n ./gradlew dependencies    generate JAR file\n ./gradlew jar -\u003e dropped JAR in build/libs directory    with application plugin:\n ./gradlew run --args=\"add 1 2\" -\u003e specifies arguments ./gradlew installDist -\u003e generate shippable application with scripts ./gradlew distZip distTar -\u003e bundle distributhe appliation ./gradlew javadocs -\u003e genetate java doc in build/docs/javadoc (index.html)    project or multi-modules project:\n ./gradlew project -\u003e show project and show projects structure    Maven Dependencies   where to find? [https://search.maven.org]\n  dependency coordinates:\n example: commons-cli:commons-cli:1.4 -\u003e \u003cgroup\u003e:\u003cartifact\u003e:\u003cversion\u003e or GAV    set the repositories (where to get from) and dependencies:\n repositories {  mavenCentral()  }   dependencies {  implementation 'commons-cli:commons-cli:1.4' // get from maven repo search results  implementation project(':appA') // add project dependencies (other modules from this project)  }   Testing with Gradle JUnit 5 dependencies   from search.maven.org:\n  search org.junit.jupiter (latest version is 5)\n minimum needed is junit-jupiter-api and junit-jupiter-engine    declaring test dependencies:\n testImplementation -\u003e work on compilation and test execution testRuntime -\u003e work on runtime only    adding dependencies:\n copy \u0026 paste Gradle Groovy DSL path for both depenencies   dependencies {  implementation 'commons-cli:commons-cli:1.4' // not a testImplementation!  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0' // test dependency  testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.7.0' // test dependency on run time only  }   commands:\n ./gradlew compileTestJava -\u003e compile tests ./gradlew test -\u003e run the tests (see useJUnitPlatform comment in order to use JUnit 5) go to build/reports/tests/test the automaticaly gradle generated HTML report (index.html) go to build/test-reults/test for the autmaticaly gradle generated XML test report    adding test task in build.gradle:\n test {  useJUnitPlatform() // Java plugin expect Java 4 by default. Add useJUnitPlatform to indicates to use JUnit5 instead   testLogging {  events 'started', 'skipped', 'failed' // will display specified events on run time  exceptionFormat 'full' // show stack trace on failures  }  }   ",
    "description": "",
    "tags": null,
    "title": "Gradle for Java-Based applications and libraries",
    "uri": "/notes/gradle-for-java-based-applications-and-libraries/"
  },
  {
    "content": " How to promote the Quality Best Practices Influence or evangelize  Data-Driven decisions   Enforce  \r How to promote the Quality Best Practices Two ways to promote the quality best practices are: Influencing the teams or to enforce the best practices. A periodical team reality check about the current practices is the beginning of the process. A team can easily live in their own Ivory Tower or to be biased by this statement: “We always did it that way so why changing it?”.\nInfluence or evangelize  Discussions: gather information about current pain points (retrospectives and lessons learned) Involve QA Specialists in all SDLC (or Software Development Life Cycle) 1:1 meetings to get information and expose point of views, share ideas and explain the best practices: it may be easier to convince on person than a group Talk to the teams Provide existing articles and blog posts Tech talk to expose the vision Create training material: guidelines, processes, videos (e.g.: Pluralsight, etc.) Involve people in quality solutions:  Organize Workshops (on short term) so that the targeted public becomes active participants Organize Work Groups (on long term) so that the concerned people become active participants   To use data as leverage; more information is available in the data-driven decision section  Data-Driven decisions To show metrics of the current situation (or challenge the “no metrics” or lack of metrics). It is the also called “Shift-Right” approach in the Software Quality world.\n End-users or Customers survey can be used (e.g.: use a post-transaction experience survey on the mobile app or web site) White-Label partner surveys Use production dashboards (examples: Datadog or SignalFX metrics) and performance tools (e.g.: WebVitals, etc.) to monitor APIs, SQLs, etc.  Daily performance emails can be sent to the engineering teams   NPS and CSAT surveys: NPS vs CSAT definitions Real Customers Journey (traces of the end-users through the applications) Use support CIM dashboards: customer tickets, production tickets, ticket aging/bug fix time, tickets by services or teams, RCA (find the issues caused by quality process)  CIM stands for Customer Interaction Management A way to generate CIM data is to use a tool like eazy bi   Correlation between test coverage (static code) and production issues  It is also possible to get test coverage from a live service using a tool like Sealights   Compile the functional testers (manual tests) created Tickets/JIRA vs current team or service test coverage Create Success Stories: start with one team and use the before/after statistics GIT statistics (e.g. with a tool like GitPrime (now Pluralsight Flow)) in order to correlate bugs/tickets and developers stats (e.g.: number of commits, active days, etc.)  I.e.: low stats may be caused by developers not working on features or test automations because they are working on manual tests or production support   Correlate the release cycle (how often the team releases or time to market) and test coverage; better/reliable test coverage and test regression suite will shorten the release cycle. Gather statistic about how much time it takes to refactor an existing feature? Better test coverage will result in faster refactoring  Enforce  Contact the best practices stakeholders and ask for support (I.e.: to push the best practices downward) To fix deadlines (must be adopted by specific dates) Enforce with Gates, checklists, DoD, etc. Set Quality specific OKRs Assign Quality trainings  ",
    "description": "",
    "tags": null,
    "title": "How to promote the Quality Best Practices",
    "uri": "/blogs/how-to-promote-the-quality-best-practices/"
  },
  {
    "content": " Create Hugo Site Install Hugo from [https://gohugo.io/]  From Mac From Windows   Create GitHub Page Create or Clone exiting Hugo repository  Clone the GitHub repo to publish on the hugo site Create a new Hugo site Clone the Theme directory Update the Hugo config.toml file content with team Build Verify if the configuration is good Update the logo Use github documentation repo as content   Try locally Build for GitHub Page Links and references  Training References    \r Create Hugo Site Install Hugo from [https://gohugo.io/] From Mac  brew install hugo\n From Windows  choco install hugo -confirm\n Reference: [https://gohugo.io/getting-started/installing#chocolatey-windows]\nCreate GitHub Page From GitHub.com -\u003e Create a new Repository, e.g., AlainBouchard.github.io\nCreate or Clone exiting Hugo repository In this example, we’ll use project engineering-notes-site\nClone the GitHub repo to publish on the hugo site engineering-notes-site\u003e git clone git@github.com:AlainBouchard/engineering-notes-site.git Create a new Hugo site engineering-notes-site\u003e hugo new site --force engineering-notes-site\u003e ls archetypes config.toml content data layouts public static themes Clone the Theme directory Example of theme, many can be found on Hugo site.\nHugo Theme Source: [https://themes.gohugo.io/themes/hugo-theme-relearn/]\ncd themes themes\u003e git clone git@github.com:McShelby/hugo-theme-relearn.git Update the Hugo config.toml file content with team \u003e vi config.toml baseURL = \"https://AlainBouchard.github.io/\" languageCode = \"en-us\" title = \"Alain Bouchard's Engineering Notes\" theme = \"hugo-theme-relearn\"  [outputs]  home = [ \"HTML\", \"RSS\", \"JSON\"]  [module]   [[module.imports]]  path = \"github.com/alain-bouchard-quality/engineering-notes\"   [[module.imports.mounts]]  source = \"content\"  target = \"content\" Build \u003e hugo -t hugo-theme-relearn Verify if the configuration is good \u003e hugo server Update the logo   Create statics/logo.png\n  Create layouts/partials/logo.html\n\u003cimg src=\"logo.png\"\u003e   Link (git submodule) the documents into the GitHub Page\n\u003e rm -Rf public \u003e git submodule add -b master git@github.com:AlainBouchard/AlainBouchard.github.io.git public \u003e git remote -v   Expect the public directory to get created with the repo content\n  Use github documentation repo as content In document source github repo Source repo example: github.com/AlainBouchard/engineering-notes\n\u003e hugo mod init github.com/AlainBouchard/engineering-notes In hugo project github repo Hugo repo example: github.com/AlainBouchard/engineering-notes-site\n\u003e hugo mod init github.com/AlainBouchard/engineering-notes-site Verify if the module work:\n\u003e hugo mod get github.com/AlainBouchard/engineering-notes Expect go.sum to get created:\ngithub.com/AlainBouchard/engineering-notes v0.0.0-20220518202018-bd023ee889d6 h1:0s4tNjEN0+jGCkNEObTbnW+akRJD5RdjJ8pPsUU5ROU=\rgithub.com/AlainBouchard/engineering-notes v0.0.0-20220518202018-bd023ee889d6/go.mod h1:Z6BTmpjCul+gI1Za7PY2E0LgyfIJpyeII/zcRE3e654= Expect go.mod to get updated:\nmodule engineering-notes-site  go 1.18  require github.com/AlainBouchard/engineering-notes v0.0.0-20220518202018-bd023ee889d6 // indirect Try locally   Build\n\u003e hugo \u003e hugo server --disableFastRender --ignoreCache   Expect Hugo to run on [http://localhost:1313/]\n  Build for GitHub Page   build for theme\n\u003e hugo -t hugo-theme-relearn \u003e go the `/public` \u003e git status \u003e git add . \u003e git commit -m \"xyz\" \u003e git push   expect the GitHub Page repo to be updated.\n  Links and references Training  [https://www.youtube.com/watch?v=LIFvgrRxdt4] (10 min)  References  [https://www.hugofordevelopers.com/articles/master-hugo-modules-handle-content-or-assets-as-modules/] [https://www.thenewdynamic.com/note/develop-hugo-modules-locally/] [https://mcshelby.github.io/hugo-theme-relearn/cont/pages/] [https://learn.netlify.app/en/shortcodes/children/] [https://codingreflections.com/hugo-table-of-contents/]  ",
    "description": "",
    "tags": null,
    "title": "Hugo",
    "uri": "/notes/hugo/"
  },
  {
    "content": " Java Object-Oriented Programming Class blueprint  Static vs Non-Static members   Enum blueprint Main class blueprint Princibles  Encapsulation Inheritance Polymorphism Abstraction   Usefull build-in JAVA commands and other information  Method Reference Operator (or ::) The Arbitrary Number of Arguments (or ... as a function argument) Predicate The final keyword Generics    \r Java Object-Oriented Programming Class blueprint // Class blueprint public class MyClass {  // Can have attributes...  private String attribute1; // private attribute member, getter/setter are needed  MyEnum myEnum;  static string staticAttribute1 = \"Static Attribute\"; // belongs to the class  private final Integer myFinalInteger; // can't be modified or be overridden by any subclasses   // Constructor  MyClass() {  // Initiate the instance of MyClass class.  this(\"'this' is used to call alternate constructors from within a constructor\");  // optional code lines...  }   // Constructor  MyClass(String message) {  // Initiate the instance of MyClass class.  }   // Setter for private attribute  public void setAttribute1(attribute1) {  this.attribute1 = attribute1; // note: \"this\" keyword is needed to disambuguate the variable reference.  }   // Getter for private attribute  public String getAttribute1() {  return attribute1;  }   // Methods or behaviours:  void myMethod() {  // no modifier so the method is accessible from its package only.  this.attribute1 = 'xyz';  }   private void myPrivateMethod() {  // private so only accessible from this classs  }   protected void myProtectedMethod() {  // protected method so accessible from this class and sub-classes  }   public void myPublicMethod() {  // public method so accessible from anywhere;  }   // Static method  static void myStaticMethod() {  // A static method does not rely on any non-static attribute or member.  } } Static vs Non-Static members  Non-Static Member: is accessible from an instance and belongs to that instance Static Member: is accessible through the class and belongs to that class  Static members can be accessed using the class name, example:    Enum blueprint // Enum blueprint public enum MyEnum {  CONSTANT1,  CONSTANT2,  ...,  CONSTANTN } Main class blueprint // Main class public class Main {  public static void main(String[] arg) {  MyClass myClass = new MyClass('abc'); // Create an object of type MyClass   myClass.myMethod('xyz'); // Call a method from my object  }  } Princibles Encapsulation  allow us to bind together data and related functionality prevent classes from becoming tightly coupled easily modify the inner workings of one class without affecting the rest of the program restrictions  we need a clear interface between a given class and the rest of the program everything can’t have direct access   make the class attributes hideen from other classes using encapsulation provide a clear interface through public methods benefits  clear pathways for classes to communicate less code changes required for a refactoring change less likely for an attribute to be overwritten with an invalid or null value unexpectedly   Access Modifiers in Java:  private: only visible in class that the member lives in no modifier: only visible in package the member lives in protected: visible to the package and all subclasses public: accessible everywhere within the program    Inheritance  allow us to create class hierarchies Subclass (child class)  inherits properties referred to as the child class   Superclass (parent class)  is inherited from referred to as the parent class   promotes code reusability and scalability leveraging inheritance:  a class can only have one superclass but multiple subclasses if multiple super classes is needed then multilevel inheritance is required    public class MySuperClass {  protected String a1;  private String a2;   MySuperClass(String a1, String a2) {  // Super Class constructor  this.a1 = a1;  this.a2 = a2;  }   public void myMethod() {  // Method of the Super Class  } }  public class MySubClass extends MySuperClass {  MySubClass(String arg1, String arg2) {  super(arg1, arg2); // call superclass with arguments  // Sub Class constructor  }   public String getA1() {  return super.a1; // this.a1 would also work for this Superclass protected variable;  }   @Override  public void myMethod() {  // Override the Super Class Method within the Sub Class  } } Polymorphism  the ability for an object or function to take amny different forms Java supports two types of polymorphism: run time and compile-time polymorphism it helps to reduce complexity and write reusable code  Abstraction   helps us with hide implementation complexity\n  Java supports abstact classes and interfaces\n  helps by fixing inputs and outputs and giving general idea of what the system does\n  an abstract class:\n almost like a template can’t be instencied other classes can extend the abstract calss and implement the appropriate functionality    an example of an abstract class:\npublic abstract class myAbstractClass {  // The class requires the `abstract` keyword since it contains an abstract method.   private final String myString; // final String (aka constant)   protected abstract void myAbstractMethod(); // an abstract method is not implemented! }  public class myOtherClass extends MyAbstractClass {  // variables, constructors... etc.   @Override  protected abstract void myAbstractMethod() {  // The abstract method from the abstract class must be implemented by the sub-class.  } }   an interface is:\n a set of method signatures for to-be-implemented functionality a specification for a set of behaviors without implementation can’t be instencied   public interface MyInterface {  Long myMethod1(); // No method implementation  void myMethod2();  }   public class myClassImplementingMyInterface implements MyInterface {  @Override  public Long myMethod1() {  // the implementation for myMethod1 method  }   @Override  public void myMethod2() {  // the implementation for myMethod2 method  }  }   Consider using abstract classes if any of these statements apply to your situation:\n In the java application, there are some related classes that need to share some lines of code then you can put these lines of code within the abstract class and this abstract class should be extended by all these related classes. You can define the non-static or non-final field(s) in the abstract class so that via a method you can access and modify the state of the Object to which they belong. You can expect that the classes that extend an abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private).    Consider using interfaces if any of these statements apply to your situation:\n It is a total abstraction, All methods declared within an interface must be implemented by the class(es) that implements this interface. A class can implement more than one interface. It is called multiple inheritances. You want to specify the behaviour of a particular data type, but not concerned about who implements its behaviour.    Usefull build-in JAVA commands and other information  System.out.println(“string…”);  Method Reference Operator (or ::)   a method reference operator (or ::) is used to call a method by referring to it with the help of its class directly\n like using a lambda expression, example:   // Get the stream  Stream\u003cString\u003e stream  = Stream.of(\"Geeks\", \"For\",  \"Geeks\", \"A\",  \"Computer\",  \"Portal\");   // Print the stream using lambda method:  stream.forEach(s -\u003e System.out.println(s));   // Print the stream using double colon operator  stream.forEach(System.out::println);   // Both lambda and :: will do the same thing.   The Arbitrary Number of Arguments (or ... as a function argument)  it means that zero or more String objects (or a single array of them) may be passed as the argument(s) for that method Reference : [http://java.sun.com/docs/books/tutorial/java/javaOO/arguments.html#varargs] important note:  the argument(s) passed in this way is always an array - even if there’s just one. Make sure you treat it that way in the method body the argument that gets the ... must be the last in the method signature. So, myMethod(int i, String… strings) is okay, but myMethod(String… strings, int i) is not okay   example:   public static int myFunction (int ... a) {  int sum = 0;  for (int i : a)  sum += i;   return sum;  }  public static void main( String args[] ) {  int ans = myFunction(1,1,1); // could have any number of arguments  System.out.println( \"Result is \"+ ans );  } Predicate   a Predicate in general meaning is a statement about something that is either true or false. In programming, predicates represent single argument functions that return a boolean value\n  example:\n @FunctionalInterface  public interface Predicate\u003cT\u003e {  boolean test(T t);  }   An example with filter() since it does accept a Predicate as parameter:\n // With lambda function:  List\u003cInteger\u003e list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);  List\u003cInteger\u003e collect = list.stream().filter(x -\u003e x \u003e 5).collect(Collectors.toList());  System.out.println(collect); // [6, 7, 8, 9, 10]   // With predicate:  Predicate\u003cInteger\u003e noGreaterThan5 = x -\u003e x \u003e 5;  List\u003cInteger\u003e list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);  List\u003cInteger\u003e collect = list.stream().filter(noGreaterThan5).collect(Collectors.toList());  System.out.println(collect); // [6, 7, 8, 9, 10]   More examples with Java 8 Predicate Examples\n  The final keyword  Java final keyword is a non-access specifier that is used to restrict a class, variable, and method. If we initialize a variable with the final keyword, then we cannot modify its value if we declare a method as final, then it cannot be overridden by any subclasses if we declare a class as final, we restrict the other classes to inherit or extend it example:  final variables: to create constants final classes: to prevent inheritance final methods: to prevent method overriding    Generics   using generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and methods.\n  using generics give many benefits over using non-generic code\n  stronger type checks at compile time:\n Java compiler applies strong type checking to generic code and issues errors if the code violates type safety. Fixing compile-time errors is easier than fixing runtime errors, which can be difficult to find example:   // Without Generics  List list = new ArrayList();  list.add(\"hello\");   // With Generics  List\u003cInteger\u003e list = new ArrayList\u003cInteger\u003e();  list.add(\"hello\"); // will not compile   enabling programmers to implement generic algorithms\n by using generics, programmers can implement generic algorithms that work on collections of different types, can be customized, and are type safe and easier to read.    elimination of casts\n example:   // Without Generics:  List list = new ArrayList();  list.add(\"hello\");  String s = (String) list.get(0); // Need to cast return value to String   // With Generics:  List\u003cString\u003e list = new ArrayList\u003cString\u003e();  list.add(\"hello\");  String s = list.get(0); // no cast needed   Generics type parameters:\n T: Type E: Element K: Key (used in Map) N: Number V: Value (used in Map)    Reference: [https://www.journaldev.com/1663/java-generics-example-method-class-interface]\n  ",
    "description": "",
    "tags": null,
    "title": "Java Object-Oriented Programming",
    "uri": "/notes/java-object-oriented-programming/"
  },
  {
    "content": " Java Spring Boot 2 Terminology Getting Started  Why Spring Boot? Spring Initializr Inversion of Control Proxies   Data Access in Spring  Spring Data Embeedded DB with Spring Boot Repository with Spring Data Using remote database   Service Tier  Utilizing IoC Service abstraction Spring Service Object   Web pages with Spring  Controller    \r Java Spring Boot 2 Terminology  POJO : Plain Old Java Object (may have more that setters/getters in Spring world) Java Beans : Simple objects with only setters/getters Spring Beans : POJOs confiugered in the application context DTO : Data Transfer Objects are Java Beans used to move state between layers IOC : Inversion Of Control  IoC provides mechanism of dependency injection Application Context wraps the Bean Factory which serves the beans at the runtime of the application Spring Boot provides auto-configuration of the Application Context    Getting Started Why Spring Boot?  Support rapid development Remove boilerplate of application setup Many uses Cloud Native support but also traditional  Key Aspects  Embedded tomacat (or others) Auto-configuration of Application Context Automatic Servlet Mappings Database support and Hibermate/JPA dialect Automatic Controller Mappings  Auto Config  Default opiniated configuration Very to override defaults Configuration on presence  Spring Initializr  start.spring.io Spring Boot: pick latest released version (ie. 2.5.6)  Packaging: Jar   Add Dependencies:  Pring Web TBD…   Generate  Now it can build and run as is:\n java -jar target/xyz-0.0.1-SNAPSHOT.jar\n Use Chrome: localhost:8080\nInversion of Control  Container mainains your class dependencies Objects injected at runtime or startup time An object accepts the dependencies for construction instead of constructing them  Spring IoC  Bean Factory Application Context References Analysis of construction order  Proxies  Beans in Bean Faactory are proxied Annitations drive proxies Annitations are easy extension points, for your own abstracts too Method calling order matters  Data Access in Spring Spring Data  Provides a common set of interfaces Provides a common naming convention Provides aspected behavior Provides Repository and Data Mapping convention  Benefits of Spring Data  Remove boilerplate code Allows for swapping datasources easier Allows to focus on buisiness logic  Key Components  Repository Interface Entity Object DataSource no accessed directly  Embeedded DB with Spring Boot Needed dependencies:\norg.springframework.boot:spring-boot-starter-data-jpa\rcom.h2database:h2 Set application.properties:\n logging.level.org.springframework.jdbc.datasource.init.ScriptUtils=debug : by default is set to info spring.jpa.hibernate.ddl-auto=none : don’t create schema, and just connect to DB  Repository with Spring Data   Java Persistence API (or JPA)\n Mapping Java objects to DB tables and vice versa is called Object-relational Mapping (ORM) JPA permits the developer to works directly with objects rather tahn with SQL statements Based on Annotations    Entity\n A class which should be persisted in a database it must be annotated with javax.persistence.Entity JPA uses a database table for every entity Persisted instances of the class will be represented as one row in the table JPA allows to auto-generate the primary key in the database via the @GeneratedValue annotation By default, the table name corresponds to the class name. You can change this with the addition to the annotation @Table(name=\"NEWTABLENAME\")    \rCode Example\r@Entity @Table(name=\"ROOM\") public class Room {  @Id  @GeneratedValue(strategy = GenerationType.AUTO)  @Column(name=\"ROOM_ID\")  private long id;  @Column(name=\"NAME\")  private String name;  @Column(name=\"ROOM_NUMBER\")  private String roomNumber;  @Column(name=\"BED_INFO\")  private String bedInfo;   public long getId() {  return id;  }   public void setId(long id) {  this.id = id;  }   public String getName() {  return name;  }   public void setName(String name) {  this.name = name;  }   public String getRoomNumber() {  return roomNumber;  }   public void setRoomNumber(String roomNumber) {  this.roomNumber = roomNumber;  }   public String getBedInfo() {  return bedInfo;  }   public void setBedInfo(String bedInfo) {  this.bedInfo = bedInfo;  }   @Override  public String toString() {  return \"Room{\" +  \"id=\" + id +  \", name='\" + name + '\\'' +  \", roomNumber='\" + roomNumber + '\\'' +  \", bedInfo='\" + bedInfo + '\\'' +  '}';  } } \r Create a CrudRepository interface for the created Entity:  \rCode Example\r@Repository public interface RoomRepository extends CrudRepository\u003cRoom, Long\u003e {  // Room is the Entity class  // Long is the ID type } \r  Create a Component Event:\n A @Component Annotation is automatically picked by Spring    \rCode Example\r@Component public class AppStartupEvent implements ApplicationListener\u003cApplicationReadyEvent\u003e {  private final RoomRepository roomRepository;   public AppStartupEvent(RoomRepository roomRepository) {  this.roomRepository = roomRepository;  }   @Override  public void onApplicationEvent(ApplicationReadyEvent event) {  Iterable\u003cRoom\u003e rooms = this.roomRepository.findAll();  rooms.forEach(System.out::println);  } } \rUsing remote database Replace the H2 database for an other database, example a PostgreSQL:\ndependencies: org.postgresql:postgresql In application.properties:\nspring.jpa.database=postgresql\rspring.datasource.url=jdbc:postgresql://localhost:5432/dev\rspring.datasource.username=postgres\rspring.datasource.password=postgres Service Tier Utilizing IoC Why use IoC?\n Allows you to focus on contracts Develoip business code only, leave constuction to the container Build intermediate abstractions Produce clean code  Srping and IoC:\n IoC container is configured by developer Spring maintains handles to objects constucted at startup Spring serves singletons to classes during construction Spring maintains lifecycle of beans Developer only accesses the application context  Service abstraction Why building Service Abstractions:\n Encapsulate layers? Abstract 3rd partys APIs Simplify implementations Swap out implementations as runtime (ie. factory pattern)  How to build one?\n Define our interface (or class) Create the API Inject the dependencies Annotate or configure (classes) Code the implemantation  Spring Service Object  We mark beans with @Service to indicate that they’re holding the business logic. Besides being used in the service layer, there isn’t any other special use for this annotation. Starting with Spring 2.5, the framework introduced annotations-driven Dependency Injection. The main annotation of this feature is @Autowired. It allows Spring to resolve and inject collaborating beans into our bean.  Using @Autowired or either properties or setters/getters isn’t a good practice or easy to test; Use final properties with constructors to have immutable object. If more than one constructor is defined then using @Autowired on the default one will make Spring to use it.    \rCode Example\r@Service public class ReservationService {  private final RoomRepository roomRepository;  private final GuestRepository guestRepository;  private final ReservationRepository reservationRepository;   @Autowired // optional if only one constructor  public ReservationService(RoomRepository roomRepository, GuestRepository guestRepository, ReservationRepository reservationRepository) {  this.roomRepository = roomRepository;  this.guestRepository = guestRepository;  this.reservationRepository = reservationRepository;  }   // Business logic here... } \rWeb pages with Spring Controller Model View Controller (or MVC)\n Fundamental pattern for Web application development The Model is the data The View is the visual display that is populated The Controller wires the view with the model  Spring Controller\n Spring bean Annotated for the servlet mapping Responds to incoming web requests Output a view or raw data  Template Engines\n Spring supports several Thymeleaf most popular Provides a DSL for HTML leaving raw html documents Placeholders for dynamic data Rendiring engin allows for final products  \rCode Example\r@Controller @RequestMapping(\"/reservations\") public class RoomReservationController {   private final DateUtils dateUtils;  private final ReservationService reservationService;   public RoomReservationController(DateUtils dateUtils, ReservationService reservationService) {  this.dateUtils = dateUtils;  this.reservationService = reservationService;  }   @RequestMapping(method = RequestMethod.GET)  public String getReservations(@RequestParam(value=\"date\", required=false) String dateString, Model model){  Date date = this.dateUtils.createDateFromDateString(dateString);  List\u003cRoomReservation\u003e roomReservations = this.reservationService.getRoomReservationsForDate(date);  model.addAttribute(\"roomReservations\", roomReservations);  return \"roomres\";  } } \rCan use Thymeleaf to create HTML pages.\n Add the web page to src/main/resources/templates  ",
    "description": "",
    "tags": null,
    "title": "Java Spring Boot 2",
    "uri": "/notes/java-spring-boot2/"
  },
  {
    "content": " Role Strategic Tactics  \r Role The architect is responsible for two main types of high-level activities:\n Strategic (foundations): take care of the technical vision in the medium to long term (one, two years or even more) Tactics (operations): technical support for teams, problem solving, proof of concept, etc.  Strategic  Define the “Quality Vision”, guidelines, technical documents (ADR, technical designs, terminology/technical glossary, etc.) while taking into account security rules, PII, etc Evaluate technologies: research, comparisons, proof of concepts, publications, etc Promote best practices for the chosen technologies Mentoring and coaching Promote quality during the six stages of software development, SDLC or “Software Development Life Cycle”: “Planning” -\u003e “Defining” -\u003e “Designing” -\u003e “Building” -\u003e “Testing” - \u003e “Deployment” Assist or lead working groups for specific topics, define the purpose and deliverables, periodic and monthly events Attend or lead workshops for specific topics, define the goal and deliverables, event over a few hours or a few days Audit of the services for test coverage and correlate the data with the problematic services in production (Data-Driven decisions) Analyze the current testing strategy, test characterization, define a plan, promote good testing practices, follow the test pyramid:  Unit (solitary and sociable) testing Component (in-process and out-of-process) testing Contract testing Integration (narrow and broad) testing UI End-to-end (E2E) and API E2E (Subcutaneous) User journey tests (and Synthetic Traffic tests) Non-functional tests: load, scalability, webvital metrics LCP, chaos/robustness, etc   Alignment on a test strategy with the deployment procedure (CI/CD) and a branching procedure (gitflow, githubflow, etc), blue/green deployment, etc Participates in the recruitment process for the “quality” aspects  Tactics  Apply the test strategy: develop test projects, add the projects to the process (build, CI/CD, cluster/kubernetes. etc), document, etc Support test development: support QAs and developers who add tests, PR reviews, etc Add test coverage: JavaScript (e.g., cypress.io, etc), python/pytest, java/rest-assured, etc Addition of Synthetic Traffic tests and verification of customer flows and scenarios (i.e., customer flows) Analyze system performance (e.g., load tests) and according to defined standards (i.e., “Given the data load X and the number of users Y, an API should respond within Z seconds”), LCP (i.e., Largest Contentful Paint) (e.g., “a page should be considered usable in less than 2.5 seconds”) Using observation tools to understand issues: datadoghq, splunk/signalfx, prometheus, ​​grafana, etc Collaborates horizontally with the different “domaines” of the company and suppliers to improve the overall quality of the company  ",
    "description": "",
    "tags": null,
    "title": "Quality Architect Role",
    "uri": "/notes/quality-architect-role/"
  },
  {
    "content": " Role Stratégique Tactique  \r Role L’architecte est responsable de deux grands types d’activités à haut niveau:\n Stratégique (fondations): s’occuper de la vision technique à moyen à long terme (un, deux ans ou même plus) ; Tactique (opérations): support technique des équipes, résolution de problèmes, preuve de concept, etc ;  Stratégique  Définir la “Vision Qualité”, les guides (ou “guidelines”), documents techniques (ADR, Technical Design, Terminologie/glossaire technique, etc.) tout en tenant compte des règles de sécuritées, PII, etc. ; Évaluer les technologies : Recherches, comparatifs, preuves de concepts, publications, etc.; Promouvoir les bonnes pratiques pour les technologies choisies; Mentorat et “Coaching”; Promouvoir la qualité lors des six étapes du développement logiciel, SDLC ou “Software Development Life Cycle” : “Planning” -\u003e “Defining” -\u003e “Designing” -\u003e “Building” -\u003e “Testing” -\u003e “Deployment” ; Assister ou diriger des groupes de travail (ou “Work Groups”) pour des sujets précis, définir le but et les livrables, événements périodiques et sur plusieurs mois ; Assister ou diriger des ateliers de travail (ou “Workshops”) pour des sujets précis, définir le but et les livrables, événement sur quelques heures ou quelques jours ; Audit de la couverture de tests et corrélation des données avec les services problématiques en production (décision basée sur les données ou “Data-Driven”); Analyser la stratégie de tests actuelle, caractérisation des tests, définir un plan, promouvoir les bonnes pratiques de tests, la pyramide de tests “pratique” (en anglais pour faciliter) :  Unit (“solitary” et “sociable”) testing ; Component (“in-process” et “out-of-process”) testing ; Contract testing ; Integration (“narrow” et “broad”) testing ; UI End-to-end (E2E) et API E2E (ou Subcutaneous) ; User journey tests (and Synthetic Traffic tests) ; Non functional tests : load, scalability, webvital metrics LCP, chaos/robustness, etc. ;   Création de projets archétypes et création de matériel de formation (on-demand training) suivi de projets pilotes ou réels, écriture de tests, documentation, etc. ; Alignment sur une stratégie de tests avec la procédure de déploiement (CI/CD) avec une procédure de “branching” (examples : gitflow ou trunk-based workflows), blue/green deployment, smoke tests, etc. ; Participe au processus de recrutement pour le volet “qualité” ;  Tactique  Appliquer la stratégie de tests : développer des projets tests, ajouter les projets au processus (build, CI/CD, cluster/kubernetes. etc), documenter, etc. ; Supporter le développement de tests: supporter les QAs et développeurs qui ajoutent des tests, PR reviews, etc. ; Ajouter une couverture de tests : javascript (exemple : cypress.io), python/pytest, java/rest-assured, etc. ; Ajout de “tests de trafic synthétique” et vérification des flux et scénarios clients (ou “customer flows”) ; Analyser les performances systèmes (example: load tests) et selon les standards définis (example: “Given the data load X and the number of users Y, an API should respond within Z seconds”), LCP (ou “Largest Contentful Paint”, example : “une page devrait être considérée utilisable en moins de 2.5 secondes”) ; Utilisation d’outils d’observation pour comprendre les problèmes : datadoghq, splunk/signalfx, prometheus, grafana, etc. ; Collabore horizontalement avec les différents “domaines” de l’entreprises et des fournisseurs pour améliorer la qualité globale de l’entreprise ;  ",
    "description": "",
    "tags": null,
    "title": "Role de l'Architecte Qualité",
    "uri": "/notes/role-architecte-qualite/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  }
]
