<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Blogs :: Alain Bouchard&#39;s Engineering Notes</title>
    <link>http://localhost:1313/blogs/index.html</link>
    <description>Blogs Building Quality: Aligning Test Strategies with the SDLC Design for Testability How to promote the Quality Best Practices Quality Architect Role Rôle de l&#39;Architecte Qualité (FR)</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/blogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building Quality: Aligning Test Strategies with the SDLC</title>
      <link>http://localhost:1313/blogs/sdlc-building-quality/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/sdlc-building-quality/index.html</guid>
      <description>Test Flow by Environment Test Flow Diagram Test Description Software Development Life Cycle (SDLC) What is SDLC? The Test Strategy within the SDLC Quality and SDLC Flow Conclusion We often discuss concepts like SDLC (Software Development Life Cycle) or a Test Strategy, but rarely do we focus on how to seamlessly integrate the test strategy into the SDLC. This is crucial because a test strategy isn’t just a standalone document — it’s a roadmap that ensures quality throughout each phase of development.</description>
    </item>
    <item>
      <title>Design for Testability</title>
      <link>http://localhost:1313/blogs/design-for-testability/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/design-for-testability/index.html</guid>
      <description>Design for Testability Background Applying Design for Testability to Software Development Test Strategy Requirements 1. Continuous Testing Across CI/CD (Shift-Left &amp; Shift-Right) 2. Repeatability &amp; Reliability 3. Comprehensive Logging &amp; Reporting 4. Self-Cleaning Tests 5. No Testing Limitations 6. Decentralized Testing Responsibility Infrastructure and Configuration for Testability 1. Testing in Any Environment (Including Production, If Needed) 2. Self-Cleaning Tests 3. Domain-Isolated Testing 4. Multi-Interface Testing 5. Feature Flag (FF) Control 6. Capturing System Metrics 7. Production-Representative Test Environments Software Development for Testability 1. CRUD API Support 2. Database Management for Testing 3. Feature Flag (FF) Control 4. Time Manipulation for Testing In a Nutshell Background “Design for Testability” is a principle I frequently use, and it comes from my early experience in electrical engineering. In hardware development, especially when designing Printed Circuit Boards (PCBs) and Printed Circuit Board Assemblies (PCBAs), testing isn’t just a step—it’s a necessity.</description>
    </item>
    <item>
      <title>How to promote the Quality Best Practices</title>
      <link>http://localhost:1313/blogs/how-to-promote-the-quality-best-practices/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/how-to-promote-the-quality-best-practices/index.html</guid>
      <description>How to promote the Quality Best Practices Influence or evangelize Data-Driven decisions Enforce How to promote the Quality Best Practices Two ways to promote the quality best practices are: Influencing the teams or to enforce the best practices. A periodical team reality check about the current practices is the beginning of the process. A team can easily live in their own Ivory Tower or to be biased by this statement: “We always did it that way so why changing it?”.</description>
    </item>
    <item>
      <title>Quality Architect Role</title>
      <link>http://localhost:1313/blogs/quality-architect-role/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/quality-architect-role/index.html</guid>
      <description>Role Strategic Tactics Role The architect is responsible for two main types of high-level activities:&#xA;Strategic (foundations): take care of the technical vision in the medium to long term (one, two years or even more) Tactics (operations): technical support for teams, problem solving, proof of concept, etc. Strategic Define the “Quality Vision”, guidelines, technical documents (ADR, technical designs, terminology/technical glossary, etc.) while taking into account security rules, PII, etc Evaluate technologies: research, comparisons, proof of concepts, publications, etc Promote best practices for the chosen technologies Mentoring and coaching Promote quality during the six stages of software development, SDLC or “Software Development Life Cycle”: “Planning” -&gt; “Defining” -&gt; “Designing” -&gt; “Building” -&gt; “Testing” - &gt; “Deployment” Assist or lead working groups for specific topics, define the purpose and deliverables, periodic and monthly events Attend or lead workshops for specific topics, define the goal and deliverables, event over a few hours or a few days Audit of the services for test coverage and correlate the data with the problematic services in production (Data-Driven decisions) Analyze the current testing strategy, test characterization, define a plan, promote good testing practices, follow the test pyramid: Unit (solitary and sociable) testing Component (in-process and out-of-process) testing Contract testing Integration (narrow and broad) testing UI End-to-end (E2E) and API E2E (Subcutaneous) User journey tests (and Synthetic Traffic tests) Non-functional tests: load, scalability, webvital metrics LCP, chaos/robustness, etc Alignment on a test strategy with the deployment procedure (CI/CD) and a branching procedure (gitflow, githubflow, etc), blue/green deployment, etc Participates in the recruitment process for the “quality” aspects Tactics Apply the test strategy: develop test projects, add the projects to the process (build, CI/CD, cluster/kubernetes. etc), document, etc Support test development: support QAs and developers who add tests, PR reviews, etc Add test coverage: JavaScript (e.g., cypress.io, etc), python/pytest, java/rest-assured, etc Addition of Synthetic Traffic tests and verification of customer flows and scenarios (i.e., customer flows) Analyze system performance (e.g., load tests) and according to defined standards (i.e., “Given the data load X and the number of users Y, an API should respond within Z seconds”), LCP (i.e., Largest Contentful Paint) (e.g., “a page should be considered usable in less than 2.5 seconds”) Using observation tools to understand issues: datadoghq, splunk/signalfx, prometheus, ​​grafana, etc Collaborates horizontally with the different “domaines” of the company and suppliers to improve the overall quality of the company</description>
    </item>
    <item>
      <title>Rôle de l&#39;Architecte Qualité (FR)</title>
      <link>http://localhost:1313/blogs/role-architecte-qualite/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blogs/role-architecte-qualite/index.html</guid>
      <description>Role Stratégique Tactique Role L’architecte est responsable de deux grands types d’activités à haut niveau:&#xA;Stratégique (fondations): s’occuper de la vision technique à moyen à long terme (un, deux ans ou même plus) ; Tactique (opérations): support technique des équipes, résolution de problèmes, preuve de concept, etc ; Stratégique Définir la “Vision Qualité”, les guides (ou “guidelines”), documents techniques (ADR, Technical Design, Terminologie/glossaire technique, etc.) tout en tenant compte des règles de sécuritées, PII, etc. ; Évaluer les technologies : Recherches, comparatifs, preuves de concepts, publications, etc.; Promouvoir les bonnes pratiques pour les technologies choisies; Mentorat et “Coaching”; Promouvoir la qualité lors des six étapes du développement logiciel, SDLC ou “Software Development Life Cycle” : “Planning” -&gt; “Defining” -&gt; “Designing” -&gt; “Building” -&gt; “Testing” -&gt; “Deployment” ; Assister ou diriger des groupes de travail (ou “Work Groups”) pour des sujets précis, définir le but et les livrables, événements périodiques et sur plusieurs mois ; Assister ou diriger des ateliers de travail (ou “Workshops”) pour des sujets précis, définir le but et les livrables, événement sur quelques heures ou quelques jours ; Audit de la couverture de tests et corrélation des données avec les services problématiques en production (décision basée sur les données ou “Data-Driven”); Analyser la stratégie de tests actuelle, caractérisation des tests, définir un plan, promouvoir les bonnes pratiques de tests, la pyramide de tests “pratique” (en anglais pour faciliter) : Unit (“solitary” et “sociable”) testing ; Component (“in-process” et “out-of-process”) testing ; Contract testing ; Integration (“narrow” et “broad”) testing ; UI End-to-end (E2E) et API E2E (ou Subcutaneous) ; User journey tests (and Synthetic Traffic tests) ; Non functional tests : load, scalability, webvital metrics LCP, chaos/robustness, etc. ; Création de projets archétypes et création de matériel de formation (on-demand training) suivi de projets pilotes ou réels, écriture de tests, documentation, etc. ; Alignment sur une stratégie de tests avec la procédure de déploiement (CI/CD) avec une procédure de “branching” (examples : gitflow ou trunk-based workflows), blue/green deployment, smoke tests, etc. ; Participe au processus de recrutement pour le volet “qualité” ; Tactique Appliquer la stratégie de tests : développer des projets tests, ajouter les projets au processus (build, CI/CD, cluster/kubernetes. etc), documenter, etc. ; Supporter le développement de tests: supporter les QAs et développeurs qui ajoutent des tests, PR reviews, etc. ; Ajouter une couverture de tests : javascript (exemple : cypress.io), python/pytest, java/rest-assured, etc. ; Ajout de “tests de trafic synthétique” et vérification des flux et scénarios clients (ou “customer flows”) ; Analyser les performances systèmes (example: load tests) et selon les standards définis (example: “Given the data load X and the number of users Y, an API should respond within Z seconds”), LCP (ou “Largest Contentful Paint”, example : “une page devrait être considérée utilisable en moins de 2.5 secondes”) ; Utilisation d’outils d’observation pour comprendre les problèmes : datadoghq, splunk/signalfx, prometheus, grafana, etc. ; Collabore horizontalement avec les différents “domaines” de l’entreprises et des fournisseurs pour améliorer la qualité globale de l’entreprise ;</description>
    </item>
  </channel>
</rss>