<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Notes :: Alain Bouchard&#39;s Engineering Notes</title>
    <link>https://AlainBouchard.github.io/notes/index.html</link>
    <description>My Engineering Notes Apache Kafka (WIP)&#xD;Data Quality&#xD;Gradle&#xD;Gradle for Java-Based applications and libraries&#xD;Hugo&#xD;IntelliJ Cheat Sheet&#xD;Java Object-Oriented Programming&#xD;Java Spring Boot 2&#xD;Java with Rest-Assured&#xD;Lombok Java Library&#xD;MongoDB&#xD;Python and PyTest</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://AlainBouchard.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apache Kafka (WIP)</title>
      <link>https://AlainBouchard.github.io/notes/apache-kafka/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/apache-kafka/index.html</guid>
      <description>Warning&#xD;2022-07-11: This is a WORK IN PROGRESS document (WIP) and need to be reviewed.&#xA;Apache Kafka Topics, partitions and offsets Brokers Brokers and topics Topic replication factor Producers Consumers Consumer offsets Kafka broker discovery Zookeeper Kafka guarantees Install Kafka using Docker images Use Kafka Topics CLI Topics CLI Kafka console producer Kafka console consumer Kafka-Client with Java Kafka Connect and Kafka Stream Apache Kafka Why Apache Kafka?</description>
    </item>
    <item>
      <title>Data Quality</title>
      <link>https://AlainBouchard.github.io/notes/data-quality/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/data-quality/index.html</guid>
      <description>Data Quality and Data Management 101 What is Data Quality Definition? What is Data Quality Management (DQM) and its pillars? What is the Impact of Poor Data Quality Real-life Examples Causes of Bad Data Data Quality Dimensions Overview Example of Accuracy Issue Example of Completeness Issue Example of Consistency Issue Example of Timelessness Issue Example of Validity Issue Example for Uniqueness Issue Example of Integrity Issues Multiple Data Quality Dimensions Issues Data Quality Rules Data Quality Techniques Data Quality Roles Data Quality Process Data Quality Tools Data Governance or Data Quality Management Best Practices Data Quality and Data Management 101 What is Data Quality Definition? In the Data and Business Intelligence domain, Data Quality refers to the overall accuracy, completeness, reliability, and relevance of data, ensuring that it is fit for its intended use In essence, Data Quality ensures that the data used in business intelligence efforts is trustworthy, allowing for accurate analysis, reporting, and decision-making Data quality is defined by how well a given dataset meets a user’s need. Data quality is an important criteria for ensuring that data-driven decisions are made as accurately as possible What is Data Quality Management (DQM) and its pillars? People: the involvement of the data stewards, analyst and business users who are responsible for setting data standards, monitoring quality, and resolving issues. These roles ensure alignment alignment between business needs and the data used to support them. Data Profiling: a critical step that involves analyzing the current state of the data by examining its structure, patterns, and anomalies. Data profiling helps uncover quality issues such as duplicates, missing values, and inconsistencies, enabling organizations to identify areas needing improvement. It is initiated to understand the current state of existing data by comparing data to data standards as set by the DQM, used to define the benchmarks to evaluate the improvements. Defining Data Quality: establishing clear, measurable data quality dimensions such as accuracy, completeness, timeliness and consistency. These criteria are developed based on business needs and objectives, ensuring that data supports decision-making and operations effectively. What the data should look like, and it is based on the business goals Data Reporting: providing regular insights and metrics on the state of data quality through dashboards audits, and scorecards. This reporting enable stakeholders to monitor progress, identify trends, and make informed decisions about improvements and corrective actions. It will return the DQM “return on the investment” (ROI), and how data compares to the defined data quality benchmarks. Data Fixing: implementing corrective actions to resolve data quality issues, including data cleansing, standardization, and deduplication. It also involves root cause analysis to prevent recurring issues by addressing underlying process or system flaws. It is intended to repair the data that doesn’t meet the defined data quality benchmarks and standards. Improving data to the required standards. Most important pillar is probably the People one.</description>
    </item>
    <item>
      <title>Gradle</title>
      <link>https://AlainBouchard.github.io/notes/gradle/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/gradle/index.html</guid>
      <description>Gradle (6.6.1) Terminology Actions Files structure for a “Multi-module build” Commands Example of Typed Task Plugins Gradle (6.6.1) requires JDK download from [https://gradle.org/releases/] can use either Groovy or Kotlin DSL (Domain-Specific Language) Terminology Project: models a software component Build script: contains automation instructions for a project Task: defines executable automation instructions Ad hoc task: implements one-off, simplistic action code by defining doFirst or doLast, automatically extends DefaultTaslk without having to declare it Typed task: Explicitly declares type (for example, Copy); does not need to define actions as they are already provided by type Wrapper: set of files checked into SCM alongside source code standardizes compatible Gradle version for a project automatically downloads the Gradle distribution with defined version Actions doLast, doFirst, … Files structure for a “Multi-module build” root + build.gradle + moduleA/ | + build.gradle | + src/ + moduleB/ + build.gradle + src/&#xD;Commands gradle &lt;task name&gt; -&gt; run the task from the build.gradle</description>
    </item>
    <item>
      <title>Gradle for Java-Based applications and libraries</title>
      <link>https://AlainBouchard.github.io/notes/gradle-for-java-based-applications-and-libraries/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/gradle-for-java-based-applications-and-libraries/index.html</guid>
      <description>Project structure for gradle project in Java In build.gradle JAVA plugin APPLICATION plugin Commands Maven Dependencies Testing with Gradle JUnit 5 dependencies Project structure for gradle project in Java single Java project with Gradle&#xA;example: root + src + main + java + resources + test + java + resources + build + classes -&gt; compiled class files + libs -&gt; generated JAR files&#xD;A multi-modules project file structure:</description>
    </item>
    <item>
      <title>Hugo</title>
      <link>https://AlainBouchard.github.io/notes/hugo/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/hugo/index.html</guid>
      <description>Create Hugo Site Install Hugo from [https://gohugo.io/] From Mac From Windows Create GitHub Page Create or Clone exiting Hugo repository Clone the GitHub repo to publish on the hugo site Create a new Hugo site Clone the Theme directory Update the Hugo config.toml file content with team Build Verify if the configuration is good Update the logo Use github documentation repo as content Try locally Build for GitHub Page Links and references Training References Create Hugo Site Install Hugo from [https://gohugo.io/] From Mac brew install hugo</description>
    </item>
    <item>
      <title>IntelliJ Cheat Sheet</title>
      <link>https://AlainBouchard.github.io/notes/intellij-ide/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/intellij-ide/index.html</guid>
      <description>IntelliJ cheat sheet IntelliJ cheat sheet Create Main Method Create Main Method Create the main method: write psvm and select the method to create:&#xA;public static void main(String[] args) { }</description>
    </item>
    <item>
      <title>Java Object-Oriented Programming</title>
      <link>https://AlainBouchard.github.io/notes/java-object-oriented-programming/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/java-object-oriented-programming/index.html</guid>
      <description>Java Object-Oriented Programming Class blueprint Static vs Non-Static members Enum blueprint Main class blueprint Princibles Encapsulation Inheritance Polymorphism Abstraction Usefull build-in JAVA commands and other information Method Reference Operator (or ::) The Arbitrary Number of Arguments (or ... as a function argument) Predicate The final keyword Generics Java Object-Oriented Programming Class blueprint // Class blueprint public class MyClass { // Can have attributes... private String attribute1; // private attribute member, getter/setter are needed MyEnum myEnum; static string staticAttribute1 = &#34;Static Attribute&#34;; // belongs to the class private final Integer myFinalInteger; // can&#39;t be modified or be overridden by any subclasses // Constructor MyClass() { // Initiate the instance of MyClass class. this(&#34;&#39;this&#39; is used to call alternate constructors from within a constructor&#34;); // optional code lines... } // Constructor MyClass(String message) { // Initiate the instance of MyClass class. } // Setter for private attribute public void setAttribute1(attribute1) { this.attribute1 = attribute1; // note: &#34;this&#34; keyword is needed to disambuguate the variable reference. } // Getter for private attribute public String getAttribute1() { return attribute1; } // Methods or behaviours: void myMethod() { // no modifier so the method is accessible from its package only. this.attribute1 = &#39;xyz&#39;; } private void myPrivateMethod() { // private so only accessible from this classs } protected void myProtectedMethod() { // protected method so accessible from this class and sub-classes } public void myPublicMethod() { // public method so accessible from anywhere; } // Static method static void myStaticMethod() { // A static method does not rely on any non-static attribute or member. } }&#xD;Static vs Non-Static members Non-Static Member: is accessible from an instance and belongs to that instance Static Member: is accessible through the class and belongs to that class Static members can be accessed using the class name, example: Enum blueprint // Enum blueprint public enum MyEnum { CONSTANT1, CONSTANT2, ..., CONSTANTN }&#xD;Main class blueprint // Main class public class Main { public static void main(String[] arg) { MyClass myClass = new MyClass(&#39;abc&#39;); // Create an object of type MyClass myClass.myMethod(&#39;xyz&#39;); // Call a method from my object } }&#xD;Princibles Encapsulation allow us to bind together data and related functionality prevent classes from becoming tightly coupled easily modify the inner workings of one class without affecting the rest of the program restrictions we need a clear interface between a given class and the rest of the program everything can’t have direct access make the class attributes hideen from other classes using encapsulation provide a clear interface through public methods benefits clear pathways for classes to communicate less code changes required for a refactoring change less likely for an attribute to be overwritten with an invalid or null value unexpectedly Access Modifiers in Java: private: only visible in class that the member lives in no modifier: only visible in package the member lives in protected: visible to the package and all subclasses public: accessible everywhere within the program Inheritance allow us to create class hierarchies Subclass (child class) inherits properties referred to as the child class Superclass (parent class) is inherited from referred to as the parent class promotes code reusability and scalability leveraging inheritance: a class can only have one superclass but multiple subclasses if multiple super classes is needed then multilevel inheritance is required public class MySuperClass { protected String a1; private String a2; MySuperClass(String a1, String a2) { // Super Class constructor this.a1 = a1; this.a2 = a2; } public void myMethod() { // Method of the Super Class } } public class MySubClass extends MySuperClass { MySubClass(String arg1, String arg2) { super(arg1, arg2); // call superclass with arguments // Sub Class constructor } public String getA1() { return super.a1; // this.a1 would also work for this Superclass protected variable; } @Override public void myMethod() { // Override the Super Class Method within the Sub Class } }&#xD;Polymorphism the ability for an object or function to take amny different forms Java supports two types of polymorphism: run time and compile-time polymorphism it helps to reduce complexity and write reusable code Abstraction helps us with hide implementation complexity</description>
    </item>
    <item>
      <title>Java Spring Boot 2</title>
      <link>https://AlainBouchard.github.io/notes/java-spring-boot2/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/java-spring-boot2/index.html</guid>
      <description>Java Spring Boot 2 Terminology Getting Started Why Spring Boot? Spring Initializr Inversion of Control Proxies Data Access in Spring Spring Data Embeedded DB with Spring Boot Repository with Spring Data Using remote database Service Tier Utilizing IoC Service abstraction Spring Service Object Web pages with Spring Controller Java Spring Boot 2 Terminology POJO : Plain Old Java Object (may have more that setters/getters in Spring world) Java Beans : Simple objects with only setters/getters Spring Beans : POJOs confiugered in the application context DTO : Data Transfer Objects are Java Beans used to move state between layers IOC : Inversion Of Control IoC provides mechanism of dependency injection Application Context wraps the Bean Factory which serves the beans at the runtime of the application Spring Boot provides auto-configuration of the Application Context Getting Started Why Spring Boot? Support rapid development Remove boilerplate of application setup Many uses Cloud Native support but also traditional Key Aspects Embedded tomacat (or others) Auto-configuration of Application Context Automatic Servlet Mappings Database support and Hibermate/JPA dialect Automatic Controller Mappings Auto Config Default opiniated configuration Very to override defaults Configuration on presence Spring Initializr start.spring.io Spring Boot: pick latest released version (ie. 2.5.6) Packaging: Jar Add Dependencies: Pring Web TBD… Generate Now it can build and run as is:</description>
    </item>
    <item>
      <title>Java with Rest-Assured</title>
      <link>https://AlainBouchard.github.io/notes/java-rest-assured/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/java-rest-assured/index.html</guid>
      <description>Java with Rest-Assured Pattern API response Deserialize a response Tools Java with Rest-Assured Rest-Assured link: [https://rest-assured.io] can get latest version: [https://mvnrepository.com] jackson databind package can be used for data-binding hamcrest package can be used for matchers org.hamcrest.Matchers.* Pattern using the Given, When and Then pattern&#xA;the Given specify prerequisites the When describe the action to take the Then describe the expected result using JUnit 5: @Test public void getTest() { String endpoint = &#34;http://localhost:8888/a/b/c&#34;; var response = given(). // using easy to read format for doc only queryParam(&#34;id&#34;, &#34;2&#34;). when(). get(endpoint). then(); } @Test public void postTest() { String endpoint = &#34;http://localhost:8888/a/b/c&#34;; String body = &#34;&#34;&#34; { &#34;key1&#34;: &#34;value1&#34;, &#34;key2&#34;: &#34;value2&#34; } &#34;&#34;&#34; var response = given().body(body).when().post(endpoint).then(); } @Test public void putTest() { String endpoint = &#34;http://localhost:8888/a/b/c&#34;; String body = &#34;&#34;&#34; { &#34;key1&#34;: &#34;value1&#34;, &#34;key2&#34;: &#34;value2&#34; } &#34;&#34;&#34; var response = given().body(body).when().put(endpoint).then(); } @Test public void deleteTest() { String endpoint = &#34;http://localhost:8888/a/b/c&#34;; String body = &#34;&#34;&#34; { &#34;key1&#34;: &#34;value1&#34; } &#34;&#34;&#34; var response = given().body(body).when().delete(endpoint).then(); }&#xD;API response validate the status code</description>
    </item>
    <item>
      <title>Lombok Java Library</title>
      <link>https://AlainBouchard.github.io/notes/java-lombok/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/java-lombok/index.html</guid>
      <description>@ToString The Class @ToString tag will replace the Overriding ToString method automatically.&#xA;@AllArgsConstructor and @NoArgsConstructor The Class @AllArgsConstructor and @NoArgsConstructor tags will automatically replace the constructors.&#xA;@EqualsAndHashCode The Class @EqualsAndHashCode tag will allow us to compare 2 objects.&#xA;@Log4J The Class @Log4J tag can replace the logger initiator in the class. The LOGGER can be replaced by log.&#xA;@Data The Class @Data tag will replace the @ToString, @RequiredArgsConstructor, @EqualsAndHashCode, @Setter (for non-final attributes) and the @Getter.</description>
    </item>
    <item>
      <title>MongoDB</title>
      <link>https://AlainBouchard.github.io/notes/mongodb/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/mongodb/index.html</guid>
      <description>MongoDB Create a doc Insert to a collection Show documents Searching using regex Sort, limit and skip Operators and arrays Updating a document Update one field Add one field Remove one field Increment a counter by N updating an array of a document Delete a document MongoDB show dbs show collections&#xA;javascript shell&#xA;use &lt;db name&gt; db.getName() -&gt; will return current DB Create a doc doc = {&#34;key&#34;:value, ...} Insert to a collection db.&lt;collection&gt;.insertOne(doc) Show documents db.&lt;collection&gt;.find() db.&lt;collection&gt;.find().pretty() -&gt; json file formated db.&lt;collection&gt;.find({}, {&#34;title&#34;: 1}) -&gt; will return only the title for all documents db.&lt;collection&gt;.find({&#34;title&#34;: &#34;tacos&#34;}) -&gt; will return all documents that match the condiction, ex. “title”:“tacos” Searching using regex db.&lt;collection&gt;.find(&#34;title&#34;: {$regex: /taco/i}}, {title: 1}) -&gt; returns the title for all documents that title march regex /taco/i</description>
    </item>
    <item>
      <title>Python and PyTest</title>
      <link>https://AlainBouchard.github.io/notes/python-and-pytest/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/python-and-pytest/index.html</guid>
      <description>Python and PyTest PyTest Why PyTest? requirements.txt content for pytest Run a test pytest.ini configuration file example Tox tox.ini Test file skeleton Test class skeleton Fixtures Python Class file skeleton Commonly used functions and examples Python and PyTest Working with multiple python versions may cause issues and confusion. It is recommended to specify the python version to use.&#xA;Working with python 3.9:&#xA;py -3.9 -m &lt;command&gt;&#xD;It is recommended to upgrade the pip version:</description>
    </item>
  </channel>
</rss>