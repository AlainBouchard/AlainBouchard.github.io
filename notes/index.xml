<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Notes on Alain Bouchard&#39;s Engineering Notes</title>
    <link>https://AlainBouchard.github.io/notes/</link>
    <description>Recent content in My Notes on Alain Bouchard&#39;s Engineering Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://AlainBouchard.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apache Kafka (WIP)</title>
      <link>https://AlainBouchard.github.io/notes/apache-kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/apache-kafka/</guid>
      <description>Warning 2022-07-11: This is a WORK IN PROGRESS document (WIP) and need to be reviewed.
   Apache Kafka  Topics, partitions and offsets Brokers Brokers and topics Topic replication factor Producers Consumers Consumer offsets Kafka broker discovery Zookeeper Kafka guarantees Install Kafka using Docker images Use Kafka Topics CLI Topics CLI Kafka console producer Kafka console consumer Kafka-Client with Java Kafka Connect and Kafka Stream     Apache Kafka Why Apache Kafka?</description>
    </item>
    <item>
      <title>Gradle</title>
      <link>https://AlainBouchard.github.io/notes/gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/gradle/</guid>
      <description>Gradle (6.6.1) Terminology Actions Files structure for a &amp;ldquo;Multi-module build&amp;rdquo; Commands Example of Typed Task Plugins   Gradle (6.6.1)  requires JDK download from [https://gradle.org/releases/] can use either Groovy or Kotlin DSL (Domain-Specific Language)  Terminology  Project: models a software component Build script: contains automation instructions for a project Task: defines executable automation instructions  Ad hoc task: implements one-off, simplistic action code by defining doFirst or doLast, automatically extends DefaultTaslk without having to declare it Typed task: Explicitly declares type (for example, Copy); does not need to define actions as they are already provided by type   Wrapper:  set of files checked into SCM alongside source code standardizes compatible Gradle version for a project automatically downloads the Gradle distribution with defined version    Actions  doLast, doFirst, &amp;hellip;  Files structure for a &amp;ldquo;Multi-module build&amp;rdquo;  root  + build.</description>
    </item>
    <item>
      <title>Gradle for Java-Based applications and libraries</title>
      <link>https://AlainBouchard.github.io/notes/gradle-for-java-based-applications-and-libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/gradle-for-java-based-applications-and-libraries/</guid>
      <description>Project structure for gradle project in Java In build.gradle  JAVA plugin APPLICATION plugin   Commands Maven Dependencies Testing with Gradle  JUnit 5 dependencies     Project structure for gradle project in Java   single Java project with Gradle
 example:   root  + src  + main  + java  + resources   + test  + java  + resources  + build  + classes -&amp;gt; compiled class files  + libs -&amp;gt; generated JAR files   A multi-modules project file structure:</description>
    </item>
    <item>
      <title>Hugo</title>
      <link>https://AlainBouchard.github.io/notes/hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/hugo/</guid>
      <description>Create Hugo Site Install Hugo from [https://gohugo.io/]  From Mac From Windows   Create GitHub Page Create or Clone exiting Hugo repository  Clone the GitHub repo to publish on the hugo site Create a new Hugo site Clone the Theme directory Update the Hugo config.toml file content with team Build Verify if the configuration is good Update the logo Use github documentation repo as content   Try locally Build for GitHub Page Links and references  Training References     Create Hugo Site Install Hugo from [https://gohugo.</description>
    </item>
    <item>
      <title>IntelliJ Cheat Sheet</title>
      <link>https://AlainBouchard.github.io/notes/intellij-ide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/intellij-ide/</guid>
      <description>IntelliJ cheat sheet  IntelliJ cheat sheet Create Main Method   Create Main Method Create the main method: write psvm and select the method to create:
 public static void main(String[] args) {   } </description>
    </item>
    <item>
      <title>Java Object-Oriented Programming</title>
      <link>https://AlainBouchard.github.io/notes/java-object-oriented-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/java-object-oriented-programming/</guid>
      <description>Java Object-Oriented Programming Class blueprint  Static vs Non-Static members   Enum blueprint Main class blueprint Princibles  Encapsulation Inheritance Polymorphism Abstraction   Usefull build-in JAVA commands and other information  Method Reference Operator (or ::) The Arbitrary Number of Arguments (or ... as a function argument) Predicate The final keyword Generics     Java Object-Oriented Programming Class blueprint // Class blueprint public class MyClass {  // Can have attributes.</description>
    </item>
    <item>
      <title>Java Spring Boot 2</title>
      <link>https://AlainBouchard.github.io/notes/java-spring-boot2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/java-spring-boot2/</guid>
      <description>Java Spring Boot 2 Terminology Getting Started  Why Spring Boot? Spring Initializr Inversion of Control Proxies   Data Access in Spring  Spring Data Embeedded DB with Spring Boot Repository with Spring Data Using remote database   Service Tier  Utilizing IoC Service abstraction Spring Service Object   Web pages with Spring  Controller     Java Spring Boot 2 Terminology  POJO : Plain Old Java Object (may have more that setters/getters in Spring world) Java Beans : Simple objects with only setters/getters Spring Beans : POJOs confiugered in the application context DTO : Data Transfer Objects are Java Beans used to move state between layers IOC : Inversion Of Control  IoC provides mechanism of dependency injection Application Context wraps the Bean Factory which serves the beans at the runtime of the application Spring Boot provides auto-configuration of the Application Context    Getting Started Why Spring Boot?</description>
    </item>
    <item>
      <title>Java with Rest-Assured</title>
      <link>https://AlainBouchard.github.io/notes/java-rest-assured/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/java-rest-assured/</guid>
      <description>Java with Rest-Assured Pattern API response Deserialize a response Tools   Java with Rest-Assured  Rest-Assured link: [https://rest-assured.io] can get latest version: [https://mvnrepository.com] jackson databind package can be used for data-binding hamcrest package can be used for matchers  org.hamcrest.Matchers.*    Pattern   using the Given, When and Then pattern
 the Given specify prerequisites the When describe the action to take the Then describe the expected result using JUnit 5:   @Test  public void getTest() {  String endpoint = &amp;#34;http://localhost:8888/a/b/c&amp;#34;;  var response = given().</description>
    </item>
    <item>
      <title>Lombok Java Library</title>
      <link>https://AlainBouchard.github.io/notes/java-lombok/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/java-lombok/</guid>
      <description>@ToString The Class @ToString tag will replace the Overriding ToString method automatically.
@AllArgsConstructor and @NoArgsConstructor The Class @AllArgsConstructor and @NoArgsConstructor tags will automatically replace the constructors.
@EqualsAndHashCode The Class @EqualsAndHashCode tag will allow us to compare 2 objects.
@Log4J The Class @Log4J tag can replace the logger initiator in the class. The LOGGER can be replaced by log.
@Data The Class @Data tag will replace the @ToString, @RequiredArgsConstructor, @EqualsAndHashCode, @Setter (for non-final attributes) and the @Getter.</description>
    </item>
    <item>
      <title>Python and PyTest</title>
      <link>https://AlainBouchard.github.io/notes/python-and-pytest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://AlainBouchard.github.io/notes/python-and-pytest/</guid>
      <description>Python and PyTest PyTest  Why PyTest? requirements.txt content for pytest Run a test pytest.ini configuration file example   Tox  tox.ini Test file skeleton Test class skeleton Fixtures   Python  Class file skeleton Commonly used functions and examples     Python and PyTest Working with multiple python versions may cause issues and confusion. It is recommended to specify the python version to use.</description>
    </item>
  </channel>
</rss>